"use strict";function Controller(){this._checkboxActivate=function(e,o){e.addEventListener("change",function(){this.active?o.classList.add("active"):o.classList.remove("active")})},this._ProgressState=function(e,o,t){document.addEventListener("click",function(r){var n=o.contains(r.target),s=e.contains(r.target);n?s?t.classList.remove("active"):t.classList.add("active"):t.classList.remove("active")})},this._ProgressTracker=function(e,o){var t=this;this.progressBar=o,this.inputs=e,this.inputs.forEach(function(e){e.element=document.querySelector(e.selector),e.added=!1,e.isValid=null,e.element.oninput=function(){e.isValid=t._determineStatus(e),t._adjustProgressIfNecessary(e)}}),this._determineStatus=function(e){var o=!1;o=e.element.value.length>0;try{o=o&&e.element.validate()}catch(e){console.log(e)}return o},this._adjustProgressIfNecessary=function(e){var o=this.progressBar.value;e.added&&!e.isValid?(o-=e.amount,e.added=!1):!e.added&&e.isValid&&(o+=e.amount,e.added=!0),this.progressBar.value=o}}}function initAutocomplete(){autocomplete=new google.maps.places.Autocomplete(document.getElementById("event-address"),{types:["geocode"]}),autocomplete.addListener("place_changed",fillInAddress),autocomplete2=new google.maps.places.Autocomplete(document.getElementById("diff-geo-address"),{types:["geocode"]}),autocomplete2.addListener("place_changed",function(){fillInAddress()})}function fillInAddress(){autocomplete.getPlace()}function geolocate(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(e){var o={lat:e.coords.latitude,lng:e.coords.longitude},t=new google.maps.Circle({center:o,radius:e.coords.accuracy});autocomplete.setBounds(t.getBounds())})}Model={rButton:document.getElementById("registerButton"),lButton:document.getElementById("loginButton"),lFormButton:document.getElementById("signInPw"),lFormRegButton:document.getElementById("accountReg"),pInfo:document.getElementById("personalInfo"),gInfo:document.getElementById("guestInfo"),loginContainer:document.querySelector("#logIn"),regContainer:document.querySelector("#registrationForm"),regInputContainer:document.querySelector(".regInput"),pInfoContainer:document.querySelector("#personalInfoContainer"),eventOptContainer:document.querySelector("#eventOptionalContainer"),loginProgressBar:document.querySelector("#progressLogin"),regProgressBar:document.querySelector("#progress-reg"),regProgressBarOpt:document.querySelector("#progress-reg-optional"),inputs:[{selector:"#loginEmail",amount:50},{selector:"#loginPassword",amount:50}],inputsReg:[{selector:"#regUserName",amount:25},{selector:"#regEmail",amount:25},{selector:"#regPassword",amount:25},{selector:"#regSecondPass",amount:25}],inputsRegOpt:[{selector:"#reg-occupation",amount:25},{selector:"#reg-birthday",amount:25},{selector:"#reg-appuse",amount:25},{selector:"#diff-geo-address",amount:25}]},View={pCheckbox:(new Controller)._checkboxActivate(Model.pInfo,Model.pInfoContainer),gCheckbox:(new Controller)._checkboxActivate(Model.gInfo,Model.eventOptContainer),logProgressHide:(new Controller)._ProgressState(Model.lButton,Model.loginContainer,Model.loginProgressBar),regProgressHide:(new Controller)._ProgressState(Model.rButton,Model.regInputContainer,Model.regProgressBar),regOptProgressHide:(new Controller)._ProgressState(Model.pInfo,Model.pInfoContainer,Model.regProgressBarOpt),progressTracker:(new Controller)._ProgressTracker(Model.inputs,Model.loginProgressBar),progressBarReg:(new Controller)._ProgressTracker(Model.inputsReg,Model.regProgressBar),progressBarRegOpt:(new Controller)._ProgressTracker(Model.inputsRegOpt,Model.regProgressBarOpt)};var placeSearch,autocomplete,componentForm={street_number:"short_name",route:"long_name",locality:"long_name",administrative_area_level_1:"short_name",country:"long_name",postal_code:"short_name"};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
